# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: Terraform

on:
  push:
    branches: [ "*" ]
  pull_request:
    
env:
  ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS }}
  APPLY: ${{ (github.ref_name == 'main' || github.ref_name == 'dev') && github.event_name == 'push' }}
  REACT_PATH: modules/frontend/src/
  CI: false

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="key=woodnet/home/$ENVIRONMENT"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var="env=$ENVIRONMENT" -var="github_token=$GITHUB_TOKEN"

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: env.APPLY == 'true'
      run: terraform apply -auto-approve -input=false -var="env=$ENVIRONMENT" -var="github_token=$GITHUB_TOKEN"
    
    # - name: Upload Terraform Data
    #   if: env.APPLY
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: backend_url
    #     path: backend_url.txt

    # - name: Dispatch Frontend Build
    #   if: env.APPLY
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ secrets.PAT }}
    #     event-type: frontend-build
    #     client-payload: '{"backend_url": "${{ env.BACKEND_URL }}", "environment": "${{ env.ENVIRONMENT }}" }'
  
  flashcards:
    if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' && github.event_name == 'push' }}
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - run: aws s3 sync src/flashcards_frontend/ s3://${{ env.ENVIRONMENT }}-flashcards-851722294868

  build:
    if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' && github.event_name == 'push' }}
    needs: terraform
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
      with:
        repository: Brennan-Flood/woodnet-frontend

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        # cache-dependency-path: ${{ env.REACT_PATH }}/package-lock.json

    # - name: Download terraform values
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: backend_url

    # - name: Save terraform data values
    #   run: |
    #     backend_url=`cat backend_url.txt`
    #     echo $backend_url

    - run: npm ci #${{ env.REACT_PATH }} --prefix ${{ env.REACT_PATH }}
    - run: npm run build --if-present # --prefix ${{ env.REACT_PATH }}
#    - run: npm test --prefix ${{ env.REACT_PATH }}
    # - run: aws s3 sync ${{ env.REACT_PATH }}build/ s3://${{ github.ref_name }}-woodnet-frontend
    - run: aws s3 sync build/ s3://${{ env.ENVIRONMENT }}-woodnet-frontend
